name: TS

on: workflow_dispatch

jobs:
  # deploy_syncgateway:
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE_TAG: ${{ github.sha }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: install doctl
  #       uses: digitalocean/action-doctl@v2.1.0
  #       with:
  #         token: ${{ secrets.DO_K8S_ACCESS_TOKEN }}
    
  #     - name: update syncgateway deployment
  #       run: TAG=$(echo $GITHUB_SHA) && sed -i 's|yoyrandao/opti-syncgateway|yoyrandao/opti-syncgateway:'${TAG}'|' $GITHUB_WORKSPACE/deploy/k8s/backend/syncgateway.deployment.yml
 
  #     - name: enable kubeconfig
  #       run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.DO_K8S_CLUSTER_NAME }}

  #     - name: deploy syncgateway
  #       run: kubectl apply -f $GITHUB_WORKSPACE/deploy/k8s/backend/syncgateway.deployment.yml

  #     - name: creating loadbalancer
  #       run: kubectl apply -f $GITHUB_WORKSPACE/deploy/k8s/backend/syncgateway.loadbalancer.yml

  # deploy_cc:
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE_TAG: ${{ github.sha }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: install doctl
  #       uses: digitalocean/action-doctl@v2.1.0
  #       with:
  #         token: ${{ secrets.DO_K8S_ACCESS_TOKEN }}

  #     - name: update cc deployment
  #       run: TAG=$(echo $GITHUB_SHA) && sed -i 's|yoyrandao/opti-cc|yoyrandao/opti-cc:'${TAG}'|' $GITHUB_WORKSPACE/deploy/k8s/backend/cc.deployment.yml
 
  #     - name: enable kubeconfig
  #       run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.DO_K8S_CLUSTER_NAME }}

  #     - name: deploy syncgateway
  #       run: kubectl apply -f $GITHUB_WORKSPACE/deploy/k8s/backend/cc.deployment.yml

  #     - name: creating loadbalancer
  #       run: kubectl apply -f $GITHUB_WORKSPACE/deploy/k8s/backend/cc.loadbalancer.yml
      
  reinit_db:
    needs:
      - deploy_cc
      - deploy_syncgateway
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v2

      - name: install psql
        run: apt-get install -y postgresql

      - name: reinitialize_db
        run: PGPASSWORD=${{ secrets.DO_PG_PASSWORD }} psql -h ${{ secrets.DO_AGENT_IP }} -p 5432 -U ${{ secrets.DO_PG_USERNAME }} -f $GITHUB_WORKSPACE/deploy/external/postgres/scripts/init_db.sql

      - name: apply db schema
        run: PGPASSWORD=${{ secrets.DO_PG_PASSWORD }} psql ${{ secrets.DO_PG_DATABASE }} -h ${{ secrets.DO_AGENT_IP }} -p 5432 -U ${{ secrets.DO_PG_USERNAME }} -f $GITHUB_WORKSPACE/deploy/external/postgres/scripts/db.sql
    
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
